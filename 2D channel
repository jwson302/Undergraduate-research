import deepxde as dde
import numpy as np
from deepxde.backend import tf

dde.config.set_default_float("float64")

#parameters(SI units)
H = 0.025
rho = 1500
eta_0 = 60
eta_inf = 0.01
lamb = 0.8
n = 0.5
f = 4
L = 0.5
T = 1
u_max = 1.02
m_A = 0.1

#characteristic scales
char_x = L
char_y = H
char_t = T
char_u = u_max
char_v = (H/L)*u_max
char_p = rho*(u_max**2)


geom = dde.geometry.Rectangle([0, -H], [L, H])
timedomain = dde.geometry.TimeDomain(0, T)
geomtime = dde.geometry.GeometryXTime(geom, timedomain)


def pde(x, u):
    # x = [x, y, t]
    # u = [u_vel(or v_x), v_vel(or v_y), p]
    u_vel, v_vel, p = u[:, 0:1], u[:, 1:2], u[:, 2:]
    
    u_vel_x = dde.grad.jacobian(u, x, i=0, j=0)
    u_vel_y = dde.grad.jacobian(u, x, i=0, j=1)
    u_vel_t = dde.grad.jacobian(u, x, i=0, j=2)
    u_vel_xx = dde.grad.hessian(u, x, component=0, i=0, j=0)
    u_vel_yy = dde.grad.hessian(u, x, component=0, i=1, j=1)
    u_vel_xy = dde.grad.hessian(u, x, component=0, i=0, j=1)
    
    v_vel_x = dde.grad.jacobian(u, x, i=1, j=0)
    v_vel_y = dde.grad.jacobian(u, x, i=1, j=1)
    v_vel_t = dde.grad.jacobian(u, x, i=1, j=2)
    v_vel_xx = dde.grad.hessian(u, x, component=1, i=0, j=0)
    v_vel_yy = dde.grad.hessian(u, x, component=1, i=1, j=1)
    v_vel_xy = dde.grad.hessian(u, x, component=1, i=0, j=1)
    
    p_x = dde.grad.jacobian(u, x, i=2, j=0)
    p_y = dde.grad.jacobian(u, x, i=2, j=1)
    
    shear_sqrd = ((u_vel_y + v_vel_x)**2 +
                        2*((u_vel_x)**2) + 2*((v_vel_y)**2))
    eta = eta_inf + (eta_0 - eta_inf)*(1+(lamb**2)*shear_sqrd)**((n-1)/2)

    eta_x = dde.grad.jacobian(eta, x, i=0, j=0)
    eta_y = dde.grad.jacobian(eta, x, i=0, j=1)
    
    momentum_x = (
       u_vel_t + u_vel*u_vel_x + v_vel*u_vel_y
       - (1/rho)*(-p_x + 2*eta_x*u_vel_x
                  + 2*eta*u_vel_xx
                 + eta_y*u_vel_y + eta_y*v_vel_x
                 + eta*u_vel_yy + eta*v_vel_xy)
    )
    momentum_y = (
        v_vel_t + u_vel*v_vel_x + v_vel*v_vel_y
       - (1/rho)*(-p_y + 2*eta_y*v_vel_y
                  + 2*eta*v_vel_yy
                 + eta_x*u_vel_y + eta_x*v_vel_x
                 + eta*v_vel_xx + eta*u_vel_xy)
    )
    continuity = u_vel_x + v_vel_y

    return [momentum_x, momentum_y, continuity]

data = dde.data.TimePDE(
    geomtime, pde, [],
    num_domain=10000)

net = dde.nn.FNN([3] + [90] * 7 + [3], "tanh", "Glorot uniform")

def input_transform(X):
    x, y, t = X[:, 0:1], X[:, 1:2], X[:, 2:]
    x_new = x/char_x
    y_new = y/char_y
    t_new = t/char_t
    
    return tf.concat((x_new, y_new, t_new), axis=1)

def modify_output(X, Y):
    x, y, t = X[:, 0:1], X[:, 1:2], X[:, 2:]
    u, v, p = Y[:, 0:1], Y[:, 1:2], Y[:, 2:]
    u_new = char_u*(t/T)*(x/L)*(1-(y/H))*(1+(y/H))*u + (u_max*(1+(y/H))*(1-(y/H))*(1+(m_A*tf.sin(2*np.pi*f*t))))
    v_new = char_v*(t/T)*(x/L)*(1-(y/H))*(1+(y/H))*v
    p_new = char_p*(1-(x/L))*p
    
    return tf.concat((u_new, v_new, p_new), axis=1)

net.apply_feature_transform(input_transform)
net.apply_output_transform(modify_output)

model = dde.Model(data, net)

model.compile("adam", lr=1e-3, loss_weights=[1, 1, 1])
model.train(iterations = 40000)
dde.optimizers.config.set_LBFGS_options(gtol=1e-09, maxiter=99000)
model.compile("L-BFGS", loss_weights=[1, 1, 1])
losshistory, train_state = model.train(model_save_path = "/ext/undergrad01/DeepXDE/hardbc62")
dde.saveplot(losshistory, train_state, issave=True, isplot=True)

print('fin')
